ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_sin_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "../User/DSP/arm_sin_f32.c"
  20              		.section	.text.arm_sin_f32,"ax",%progbits
  21              		.align	1
  22              		.global	arm_sin_f32
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_sin_f32:
  28              	.LFB103:
   1:../User/DSP/arm_sin_f32.c **** /* ----------------------------------------------------------------------
   2:../User/DSP/arm_sin_f32.c ****  * Project:      CMSIS DSP Library
   3:../User/DSP/arm_sin_f32.c ****  * Title:        arm_sin_f32.c
   4:../User/DSP/arm_sin_f32.c ****  * Description:  Fast sine calculation for floating-point values
   5:../User/DSP/arm_sin_f32.c ****  *
   6:../User/DSP/arm_sin_f32.c ****  * $Date:        23 April 2021
   7:../User/DSP/arm_sin_f32.c ****  * $Revision:    V1.9.0
   8:../User/DSP/arm_sin_f32.c ****  *
   9:../User/DSP/arm_sin_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:../User/DSP/arm_sin_f32.c ****  * -------------------------------------------------------------------- */
  11:../User/DSP/arm_sin_f32.c **** /*
  12:../User/DSP/arm_sin_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:../User/DSP/arm_sin_f32.c ****  *
  14:../User/DSP/arm_sin_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../User/DSP/arm_sin_f32.c ****  *
  16:../User/DSP/arm_sin_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../User/DSP/arm_sin_f32.c ****  * not use this file except in compliance with the License.
  18:../User/DSP/arm_sin_f32.c ****  * You may obtain a copy of the License at
  19:../User/DSP/arm_sin_f32.c ****  *
  20:../User/DSP/arm_sin_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../User/DSP/arm_sin_f32.c ****  *
  22:../User/DSP/arm_sin_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../User/DSP/arm_sin_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../User/DSP/arm_sin_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../User/DSP/arm_sin_f32.c ****  * See the License for the specific language governing permissions and
  26:../User/DSP/arm_sin_f32.c ****  * limitations under the License.
  27:../User/DSP/arm_sin_f32.c ****  */
  28:../User/DSP/arm_sin_f32.c **** 
  29:../User/DSP/arm_sin_f32.c **** #include "fast_math_functions.h"
  30:../User/DSP/arm_sin_f32.c **** #include "arm_common_tables.h"
ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 2


  31:../User/DSP/arm_sin_f32.c **** 
  32:../User/DSP/arm_sin_f32.c **** /**
  33:../User/DSP/arm_sin_f32.c ****   @ingroup groupFastMath
  34:../User/DSP/arm_sin_f32.c ****  */
  35:../User/DSP/arm_sin_f32.c **** 
  36:../User/DSP/arm_sin_f32.c **** /**
  37:../User/DSP/arm_sin_f32.c ****   @defgroup sin Sine
  38:../User/DSP/arm_sin_f32.c **** 
  39:../User/DSP/arm_sin_f32.c ****   Computes the trigonometric sine function using a combination of table lookup
  40:../User/DSP/arm_sin_f32.c ****   and linear interpolation.  There are separate functions for
  41:../User/DSP/arm_sin_f32.c ****   Q15, Q31, and floating-point data types.
  42:../User/DSP/arm_sin_f32.c ****   The input to the floating-point version is in radians while the
  43:../User/DSP/arm_sin_f32.c ****   fixed-point Q15 and Q31 have a scaled input with the range
  44:../User/DSP/arm_sin_f32.c ****   [0 +0.9999] mapping to [0 2*pi).  The fixed-point range is chosen so that a
  45:../User/DSP/arm_sin_f32.c ****   value of 2*pi wraps around to 0.
  46:../User/DSP/arm_sin_f32.c **** 
  47:../User/DSP/arm_sin_f32.c ****   The implementation is based on table lookup using 512 values together with linear interpolation.
  48:../User/DSP/arm_sin_f32.c ****   The steps used are:
  49:../User/DSP/arm_sin_f32.c ****    -# Calculation of the nearest integer table index
  50:../User/DSP/arm_sin_f32.c ****    -# Compute the fractional portion (fract) of the table index.
  51:../User/DSP/arm_sin_f32.c ****    -# The final result equals <code>(1.0f-fract)*a + fract*b;</code>
  52:../User/DSP/arm_sin_f32.c **** 
  53:../User/DSP/arm_sin_f32.c ****   where
  54:../User/DSP/arm_sin_f32.c ****   <pre>
  55:../User/DSP/arm_sin_f32.c ****      b = Table[index];
  56:../User/DSP/arm_sin_f32.c ****      c = Table[index+1];
  57:../User/DSP/arm_sin_f32.c ****   </pre>
  58:../User/DSP/arm_sin_f32.c ****  */
  59:../User/DSP/arm_sin_f32.c **** 
  60:../User/DSP/arm_sin_f32.c **** /**
  61:../User/DSP/arm_sin_f32.c ****   @addtogroup sin
  62:../User/DSP/arm_sin_f32.c ****   @{
  63:../User/DSP/arm_sin_f32.c ****  */
  64:../User/DSP/arm_sin_f32.c **** 
  65:../User/DSP/arm_sin_f32.c **** /**
  66:../User/DSP/arm_sin_f32.c ****   @brief         Fast approximation to the trigonometric sine function for floating-point data.
  67:../User/DSP/arm_sin_f32.c ****   @param[in]     x  input value in radians.
  68:../User/DSP/arm_sin_f32.c ****   @return        sin(x)
  69:../User/DSP/arm_sin_f32.c ****  */
  70:../User/DSP/arm_sin_f32.c **** 
  71:../User/DSP/arm_sin_f32.c **** float32_t arm_sin_f32(
  72:../User/DSP/arm_sin_f32.c ****   float32_t x)
  73:../User/DSP/arm_sin_f32.c **** {
  29              		.loc 1 73 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 3


  43              		.cfi_def_cfa_register 7
  44 0006 87ED010A 		vstr.32	s0, [r7, #4]
  74:../User/DSP/arm_sin_f32.c ****   float32_t sinVal, fract, in;                   /* Temporary input, output variables */
  75:../User/DSP/arm_sin_f32.c ****   uint16_t index;                                /* Index variable */
  76:../User/DSP/arm_sin_f32.c ****   float32_t a, b;                                /* Two nearest output values */
  77:../User/DSP/arm_sin_f32.c ****   int32_t n;
  78:../User/DSP/arm_sin_f32.c ****   float32_t findex;
  79:../User/DSP/arm_sin_f32.c **** 
  80:../User/DSP/arm_sin_f32.c ****   /* input x is in radians */
  81:../User/DSP/arm_sin_f32.c ****   /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  82:../User/DSP/arm_sin_f32.c ****   in = x * 0.159154943092f;
  45              		.loc 1 82 6
  46 000a D7ED017A 		vldr.32	s15, [r7, #4]
  47 000e 9FED3A7A 		vldr.32	s14, .L7
  48 0012 67EE877A 		vmul.f32	s15, s15, s14
  49 0016 C7ED067A 		vstr.32	s15, [r7, #24]
  83:../User/DSP/arm_sin_f32.c **** 
  84:../User/DSP/arm_sin_f32.c ****   /* Calculation of floor value of input */
  85:../User/DSP/arm_sin_f32.c ****   n = (int32_t) in;
  50              		.loc 1 85 5
  51 001a D7ED067A 		vldr.32	s15, [r7, #24]
  52 001e FDEEE77A 		vcvt.s32.f32	s15, s15
  53 0022 17EE903A 		vmov	r3, s15	@ int
  54 0026 3B62     		str	r3, [r7, #32]
  86:../User/DSP/arm_sin_f32.c **** 
  87:../User/DSP/arm_sin_f32.c ****   /* Make negative values towards -infinity */
  88:../User/DSP/arm_sin_f32.c ****   if (in < 0.0f)
  55              		.loc 1 88 6
  56 0028 D7ED067A 		vldr.32	s15, [r7, #24]
  57 002c F5EEC07A 		vcmpe.f32	s15, #0
  58 0030 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  59 0034 02D5     		bpl	.L2
  89:../User/DSP/arm_sin_f32.c ****   {
  90:../User/DSP/arm_sin_f32.c ****     n--;
  60              		.loc 1 90 6
  61 0036 3B6A     		ldr	r3, [r7, #32]
  62 0038 013B     		subs	r3, r3, #1
  63 003a 3B62     		str	r3, [r7, #32]
  64              	.L2:
  91:../User/DSP/arm_sin_f32.c ****   }
  92:../User/DSP/arm_sin_f32.c **** 
  93:../User/DSP/arm_sin_f32.c ****   /* Map input value to [0 1] */
  94:../User/DSP/arm_sin_f32.c ****   in = in - (float32_t) n;
  65              		.loc 1 94 13
  66 003c 3B6A     		ldr	r3, [r7, #32]
  67 003e 07EE903A 		vmov	s15, r3	@ int
  68 0042 F8EEE77A 		vcvt.f32.s32	s15, s15
  69              		.loc 1 94 6
  70 0046 97ED067A 		vldr.32	s14, [r7, #24]
  71 004a 77EE677A 		vsub.f32	s15, s14, s15
  72 004e C7ED067A 		vstr.32	s15, [r7, #24]
  95:../User/DSP/arm_sin_f32.c **** 
  96:../User/DSP/arm_sin_f32.c ****   /* Calculation of index of the table */
  97:../User/DSP/arm_sin_f32.c ****   findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
  73              		.loc 1 97 10
  74 0052 D7ED067A 		vldr.32	s15, [r7, #24]
  75 0056 9FED297A 		vldr.32	s14, .L7+4
ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 4


  76 005a 67EE877A 		vmul.f32	s15, s15, s14
  77 005e C7ED077A 		vstr.32	s15, [r7, #28]
  98:../User/DSP/arm_sin_f32.c ****   index = (uint16_t)findex;
  78              		.loc 1 98 9
  79 0062 D7ED077A 		vldr.32	s15, [r7, #28]
  80 0066 FCEEE77A 		vcvt.u32.f32	s15, s15
  81 006a 17EE903A 		vmov	r3, s15	@ int
  82 006e FB84     		strh	r3, [r7, #38]	@ movhi
  99:../User/DSP/arm_sin_f32.c **** 
 100:../User/DSP/arm_sin_f32.c ****   /* when "in" is exactly 1, we need to rotate the index down to 0 */
 101:../User/DSP/arm_sin_f32.c ****   if (index >= FAST_MATH_TABLE_SIZE) {
  83              		.loc 1 101 6
  84 0070 FB8C     		ldrh	r3, [r7, #38]
  85 0072 B3F5007F 		cmp	r3, #512
  86 0076 09D3     		bcc	.L4
 102:../User/DSP/arm_sin_f32.c ****     index = 0;
  87              		.loc 1 102 11
  88 0078 0023     		movs	r3, #0
  89 007a FB84     		strh	r3, [r7, #38]	@ movhi
 103:../User/DSP/arm_sin_f32.c ****     findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  90              		.loc 1 103 12
  91 007c D7ED077A 		vldr.32	s15, [r7, #28]
  92 0080 9FED1E7A 		vldr.32	s14, .L7+4
  93 0084 77EEC77A 		vsub.f32	s15, s15, s14
  94 0088 C7ED077A 		vstr.32	s15, [r7, #28]
  95              	.L4:
 104:../User/DSP/arm_sin_f32.c ****   }
 105:../User/DSP/arm_sin_f32.c **** 
 106:../User/DSP/arm_sin_f32.c ****   /* fractional value calculation */
 107:../User/DSP/arm_sin_f32.c ****   fract = findex - (float32_t) index;
  96              		.loc 1 107 20
  97 008c FB8C     		ldrh	r3, [r7, #38]
  98 008e 07EE903A 		vmov	s15, r3	@ int
  99 0092 F8EE677A 		vcvt.f32.u32	s15, s15
 100              		.loc 1 107 9
 101 0096 97ED077A 		vldr.32	s14, [r7, #28]
 102 009a 77EE677A 		vsub.f32	s15, s14, s15
 103 009e C7ED057A 		vstr.32	s15, [r7, #20]
 108:../User/DSP/arm_sin_f32.c **** 
 109:../User/DSP/arm_sin_f32.c ****   /* Read two nearest values of input value from the sin table */
 110:../User/DSP/arm_sin_f32.c ****   a = sinTable_f32[index];
 104              		.loc 1 110 19
 105 00a2 FB8C     		ldrh	r3, [r7, #38]
 106              		.loc 1 110 5
 107 00a4 164A     		ldr	r2, .L7+8
 108 00a6 9B00     		lsls	r3, r3, #2
 109 00a8 1344     		add	r3, r3, r2
 110 00aa 1B68     		ldr	r3, [r3]	@ float
 111 00ac 3B61     		str	r3, [r7, #16]	@ float
 111:../User/DSP/arm_sin_f32.c ****   b = sinTable_f32[index+1];
 112              		.loc 1 111 25
 113 00ae FB8C     		ldrh	r3, [r7, #38]
 114 00b0 0133     		adds	r3, r3, #1
 115              		.loc 1 111 5
 116 00b2 134A     		ldr	r2, .L7+8
 117 00b4 9B00     		lsls	r3, r3, #2
 118 00b6 1344     		add	r3, r3, r2
ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 5


 119 00b8 1B68     		ldr	r3, [r3]	@ float
 120 00ba FB60     		str	r3, [r7, #12]	@ float
 112:../User/DSP/arm_sin_f32.c **** 
 113:../User/DSP/arm_sin_f32.c ****   /* Linear interpolation process */
 114:../User/DSP/arm_sin_f32.c ****   sinVal = (1.0f - fract) * a + fract * b;
 121              		.loc 1 114 18
 122 00bc B7EE007A 		vmov.f32	s14, #1.0e+0
 123 00c0 D7ED057A 		vldr.32	s15, [r7, #20]
 124 00c4 37EE677A 		vsub.f32	s14, s14, s15
 125              		.loc 1 114 27
 126 00c8 D7ED047A 		vldr.32	s15, [r7, #16]
 127 00cc 27EE277A 		vmul.f32	s14, s14, s15
 128              		.loc 1 114 39
 129 00d0 D7ED056A 		vldr.32	s13, [r7, #20]
 130 00d4 D7ED037A 		vldr.32	s15, [r7, #12]
 131 00d8 66EEA77A 		vmul.f32	s15, s13, s15
 132              		.loc 1 114 10
 133 00dc 77EE277A 		vadd.f32	s15, s14, s15
 134 00e0 C7ED027A 		vstr.32	s15, [r7, #8]
 115:../User/DSP/arm_sin_f32.c **** 
 116:../User/DSP/arm_sin_f32.c ****   /* Return output value */
 117:../User/DSP/arm_sin_f32.c ****   return (sinVal);
 135              		.loc 1 117 10
 136 00e4 BB68     		ldr	r3, [r7, #8]	@ float
 137 00e6 07EE903A 		vmov	s15, r3
 118:../User/DSP/arm_sin_f32.c **** }
 138              		.loc 1 118 1
 139 00ea B0EE670A 		vmov.f32	s0, s15
 140 00ee 2C37     		adds	r7, r7, #44
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 4
 143 00f0 BD46     		mov	sp, r7
 144              	.LCFI4:
 145              		.cfi_def_cfa_register 13
 146              		@ sp needed
 147 00f2 5DF8047B 		ldr	r7, [sp], #4
 148              	.LCFI5:
 149              		.cfi_restore 7
 150              		.cfi_def_cfa_offset 0
 151 00f6 7047     		bx	lr
 152              	.L8:
 153              		.align	2
 154              	.L7:
 155 00f8 83F9223E 		.word	1042479491
 156 00fc 00000044 		.word	1140850688
 157 0100 00000000 		.word	sinTable_f32
 158              		.cfi_endproc
 159              	.LFE103:
 161              		.text
 162              	.Letext0:
 163              		.file 2 "d:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.3 rel1\\arm-none-eabi\\inclu
 164              		.file 3 "d:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.3 rel1\\arm-none-eabi\\inclu
 165              		.file 4 "../User/DSP/arm_math_types.h"
 166              		.file 5 "../User/DSP/arm_common_tables.h"
ARM GAS  C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 arm_sin_f32.c
C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s:21     .text.arm_sin_f32:00000000 $t
C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s:27     .text.arm_sin_f32:00000000 arm_sin_f32
C:\Users\ZShuai\AppData\Local\Temp\cc2HW090.s:155    .text.arm_sin_f32:000000f8 $d

UNDEFINED SYMBOLS
sinTable_f32
